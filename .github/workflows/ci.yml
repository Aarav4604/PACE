name: PACE CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and Format Check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: 'TypeScript/JavaScript'
            command: 'yarn lint'
            working-directory: '.'
          - name: 'Python - Ingest'
            command: 'black --check . && flake8 .'
            working-directory: './apps/services/ingest'
          - name: 'Python - Risk'
            command: 'black --check . && flake8 .'
            working-directory: './apps/services/risk'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: yarn install

      - name: Install Python dependencies
        run: |
          cd apps/services/ingest && pip install -e .
          cd ../risk && pip install -e .

      - name: Run ${{ matrix.name }}
        run: ${{ matrix.command }}
        working-directory: ${{ matrix.working-directory }}

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: 'API Tests'
            command: 'yarn test'
            working-directory: './apps/api'
          - name: 'Mobile Tests'
            command: 'yarn test'
            working-directory: './apps/mobile'
          - name: 'Python Tests - Ingest'
            command: 'pytest'
            working-directory: './apps/services/ingest'
          - name: 'Python Tests - Risk'
            command: 'pytest'
            working-directory: './apps/services/risk'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: yarn install

      - name: Install Python dependencies
        run: |
          cd apps/services/ingest && pip install -e .[dev]
          cd ../risk && pip install -e .[dev]

      - name: Run ${{ matrix.name }}
        run: ${{ matrix.command }}
        working-directory: ${{ matrix.working-directory }}

  # Build Applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - name: 'API Build'
            command: 'yarn build'
            working-directory: './apps/api'
          - name: 'UI Kit Build'
            command: 'yarn build'
            working-directory: './packages/ui-kit'
          - name: 'Schemas Build'
            command: 'yarn build'
            working-directory: './packages/schemas'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.command }}
        working-directory: ${{ matrix.working-directory }}

  # Docker Build
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        include:
          - name: 'API Image'
            dockerfile: './apps/api/Dockerfile'
            context: './apps/api'
            image: 'pace-api'
          - name: 'Ingest Image'
            dockerfile: './apps/services/ingest/Dockerfile'
            context: './apps/services/ingest'
            image: 'pace-ingest'
          - name: 'Risk Image'
            dockerfile: './apps/services/risk/Dockerfile'
            context: './apps/services/risk'
            image: 'pace-risk'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          tags: ${{ matrix.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: yarn install

      - name: Install Python dependencies
        run: |
          cd apps/services/ingest && pip install -e .[dev]
          cd ../risk && pip install -e .[dev]

      - name: Run integration tests
        run: yarn test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Run security audit
        run: yarn audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build and push API image
          docker build -t $ECR_REGISTRY/pace-api:staging ./apps/api
          docker push $ECR_REGISTRY/pace-api:staging
          
          # Build and push Ingest image
          docker build -t $ECR_REGISTRY/pace-ingest:staging ./apps/services/ingest
          docker push $ECR_REGISTRY/pace-ingest:staging
          
          # Build and push Risk image
          docker build -t $ECR_REGISTRY/pace-risk:staging ./apps/services/risk
          docker push $ECR_REGISTRY/pace-risk:staging

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster pace-staging --service pace-api --force-new-deployment
          aws ecs update-service --cluster pace-staging --service pace-ingest --force-new-deployment
          aws ecs update-service --cluster pace-staging --service pace-risk --force-new-deployment

  # Mobile Build (Android)
  mobile-build-android:
    name: Build Mobile App (Android)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install dependencies
        run: yarn install

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Build Android APK
        run: |
          cd apps/mobile
          yarn build:android

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: pace-android-apk
          path: apps/mobile/android/app/build/outputs/apk/release/

  # Mobile Build (iOS)
  mobile-build-ios:
    name: Build Mobile App (iOS)
    runs-on: macos-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Build iOS App
        run: |
          cd apps/mobile
          yarn build:ios

      - name: Upload iOS App
        uses: actions/upload-artifact@v4
        with:
          name: pace-ios-app
          path: apps/mobile/ios/build/ 